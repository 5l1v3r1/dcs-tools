#!/bin/bash
# ----------------------------------------------------
# -- Checklist
# ----------------------------------------------------
# * detect device to format
# * create appropriate partitions
# * format these partitions with appropriate filesystems
# * mount partitions
# * copy files from backup to these mountpoints
# * INSTALL APPROPRIATE BOOTLOADER (no need for RaspberryPi)
#

# exit on error
set -e

set_dir () { DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; }; set_dir
safe_source () { source $1; set_dir; }

if [[ $(id -u) > 0 ]]; then sudo $0 "$@"; exit; fi

safe_source $DIR/aktos-bash-lib/basic-functions.sh
safe_source $DIR/aktos-bash-lib/fs-functions.sh

backup=
device=
fstype=
verbose=0
skip_format=

die () {
    if [[ "$@" ]]; then
        errcho "ERROR: "
        errcho "ERROR: $@"
        errcho "ERROR: "
    fi
    show_help
    exit 5
}

show_help () {
    cat <<HELP

    Usage:

        $(basename $0) ...options...

    Options:

    --backup        : backup directory
    --device        : the device to format and create bootable disk
    --fs-type       : target filesystem type (default ext3)
    --skip-format   : skip formatting target disk, only perform rsync
    --hardware      : hardware type for formatting the disk

HELP
}

while :; do
    case $1 in
        -h|-\?|--help)
            show_help    # Display a usage synopsis.
            exit
            ;;
        --backup)       # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                backup=$(realpath $2)
                shift
            else
                die '"--backup" requires a non-empty option argument.'
            fi
            ;;
        --device)       # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                device=$2
                shift
            else
                die '"--device" requires a non-empty option argument.'
            fi
            ;;
        --hardware)       # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                hardware=$2
                shift
            else
                die '"--hardware" requires a non-empty option argument.'
            fi
            ;;

        --fs-type)       # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                fstype=$2
                shift
            else
                die '"--fs-type" requires a non-empty option argument.'
            fi
            ;;
        -v|--verbose)
            verbose=$((verbose + 1))  # Each -v adds 1 to verbosity.
            ;;
        --skip-format)
            skip_format=true
            ;;
        -?*)
            printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
            ;;
        *)               # Default case: No more options, so break out of the loop.
            break
    esac

    shift
done

# check the arguments
# -----------------------------------------------
if [ "$fstype" == "" ]; then
    fstype="ext3"
    #echo_yellow "Using default $fstype type. "
fi

hardware="format-$hardware.sh"
if [[ ! -f "$DIR/$hardware" ]]; then
    formatters=$(ls $DIR/format-*.sh | xargs -n 1 basename | sed "s/format-\(.*\)\.sh/\1/")
    echo_yellow "ERROR: One of the hardware types must be provided: "
    for formatter in $formatters; do
        echo_yellow "ERROR: * $formatter"
    done
    die "No such formatter found: $hardware"
fi

if [[ ! -d $backup ]]; then
    die "Backup directory must be provided. (not a dir: $backup)"
fi

# BE ABSOLUTELY SURE THAT THE DEVICE IS NOT A CURRENTLY USED DISK!!!
if [[ ! -b $device ]]; then
    die "Physical device $device MUST exist in the first place"
fi
curr_disks=$(find_disks)
press_enter_to_continue "Unplug the disk $device and press enter to continue."
disk_diff=$(echo -n ${curr_disks#"$(find_disks)"})
if [[ "$disk_diff" != "$device" ]]; then
    echo_err "The device you unplugged must be the device you specified before. ($disk_diff)"
else
    echo_green "$device seems to be the correct device."
    press_enter_to_continue "Plug the disk again and press enter to continue."
fi

while :; do
    if [[ ! -b $device ]]; then
        echo "...waiting for $device to appear again..."
    else
        break
    fi
    sleep 2
done

# Calculate partition prefix
PARTITION_PREFIX=
if [ "${device//[[:digit:]]/}" == "/dev/mmcblk" ]; then
    #echo "...this is obviously an SD Card"
    PARTITION_PREFIX="p"
fi

# print the summary:
echo_green "Summary: "
echo_green "-----------------------------------"
echo_green "Using filesystem type: $fstype"
if [ $skip_format ]; then
    echo_yellow "...will skip formatting..."
fi
echo_green "Using device:"
echo
lsblk $device | indent2
echo
echo_green "Using backup directory: .${backup#$PWD}"

if prompt_yes_no "Should we really continue?"; then
    PROJECT_ROOT=$(realpath "$DIR/..")
    echo_green "Building $device by using files from .${backup#$PWD}"
else
    echo_info "Interrupted by user."
    exit 0
fi

# end of check arguments

# -----------------------------------------------------------------------------
#   All variables are set so far, include proper formatter
# -----------------------------------------------------------------------------

#source $DIR/format-raspberry-pi.sh
source $DIR/format-orange-pi.sh
