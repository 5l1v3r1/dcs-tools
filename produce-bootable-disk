#!/bin/bash
# ----------------------------------------------------
# -- Checklist
# ----------------------------------------------------
# * detect device to format
# * create appropriate partitions
# * format these partitions with appropriate filesystems
# * mount partitions
# * copy files from backup to these mountpoints
# * INSTALL APPROPRIATE BOOTLOADER (no need for RaspberryPi)
#

# exit on error
set -e

set_dir () { DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; }; set_dir
safe_source () { source $1; set_dir; }

if [[ $(id -u) > 0 ]]; then sudo $0 "$@"; exit; fi

safe_source $DIR/aktos-bash-lib/basic-functions.sh
safe_source $DIR/aktos-bash-lib/fs-functions.sh

src=
device=
verbose=0
skip_format=false

die () {
    if [[ "$@" ]]; then
        errcho "ERROR: "
        errcho "ERROR: $@"
        errcho "ERROR: "
    fi
    show_help
    exit 5
}

get_relative(){
    current="$1"
    absolute="$2"
    echo $(perl -MFile::Spec -e 'print File::Spec->abs2rel("'$absolute'","'$current'")')
}


show_help () {
    cat <<HELP

    Usage:

        $(basename $0) ...options...

    Options:

    --src           : source directory
    --device        : the device to format and create bootable disk
    --skip-format   : skip formatting target disk, only perform rsync
    --hardware      : hardware type for formatting the disk

HELP
}

while :; do
    case $1 in
        -h|-\?|--help)
            show_help    # Display a usage synopsis.
            exit
            ;;
        --src)       # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                src=$(realpath $2)
                shift
            else
                die '"--src" requires a non-empty option argument.'
            fi
            ;;
        --device)       # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                device=$2
                shift
            else
                die '"--device" requires a non-empty option argument.'
            fi
            ;;
        --hardware)       # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                hardware=$2
                shift
            else
                die '"--hardware" requires a non-empty option argument.'
            fi
            ;;

        -v|--verbose)
            verbose=$((verbose + 1))  # Each -v adds 1 to verbosity.
            ;;
        --skip-format)
            skip_format=true
            ;;
        -?*)
            printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
            ;;
        *)               # Default case: No more options, so break out of the loop.
            break
    esac

    shift
done

# check the arguments
# -----------------------------------------------
restore_script="$(get_relative $PWD $DIR/format-$hardware.sh)"
if [[ ! -f "$restore_script" ]]; then
    formatters=$(ls $DIR/format-*.sh | xargs -n 1 basename | sed "s/format-\(.*\)\.sh/\1/")
    echo_yellow "ERROR: One of the hardware types must be provided: "
    for formatter in $formatters; do
        echo_yellow "ERROR: * $formatter"
    done
    die "No such restore script found: $hardware"
fi

if [[ ! -d $src ]]; then
    die "Source directory must be provided. (not a dir: $src)"
fi

# BE ABSOLUTELY SURE THAT THE DEVICE IS NOT A CURRENTLY USED DISK!!!
if [[ "$device" == "" ]]; then
    die "Physical device MUST be provided."
fi

if [[ ! -b $device ]]; then
    die "Physical device $device MUST exist in the first place"
fi
curr_disks=$(find_disks)
press_enter_to_continue "Unplug the disk $device and press enter to continue."
sleep 1
disk_diff=$(echo -n ${curr_disks#"$(find_disks)"})
if [[ "$disk_diff" != "$device" ]]; then
    echo_err "The device you unplugged must be the device you specified before. ($disk_diff)"
else
    echo_green "$device seems to be the correct device."
    echo_yellow "Plug the disk again to continue..."
fi

# wait for device to appear again
sleep 1
while [ ! -b $device ] ; do
    #echo "...waiting for $device to appear again..."
    sleep 1
done

# Calculate partition prefix
PARTITION_PREFIX=
if [ "${device//[[:digit:]]/}" == "/dev/mmcblk" ]; then
    #echo "...this is obviously an SD Card"
    PARTITION_PREFIX="p"
fi

# print the summary:
echo "Summary: "
echo "-----------------------------------"
echo_yellow "Restore script: $restore_script"
if $skip_format; then
    echo_yellow "...will skip formatting..."
fi
echo "Using device:"
echo
lsblk $device | indent2
echo
relative_src=$(get_relative $PWD, $src)
echo "Using source directory: ${relative_src}"

if prompt_yes_no "Should we really continue?"; then
    PROJECT_ROOT=$(realpath "$DIR/..")
    echo_green "Building $device by using files from .${src#$PWD}"
else
    echo_info "Interrupted by user."
    exit 0
fi

# end of check arguments

# Semantic variables
FIRST_PARTITION="${PARTITION_PREFIX}1"
SECOND_PARTITION="${PARTITION_PREFIX}2"
THIRD_PARTITION="${PARTITION_PREFIX}3"
FOURTH_PARTITION="${PARTITION_PREFIX}4"

#include proper restoration script
source $restore_script

# if sourced formatter didn't exit till this point, process is succeeded
echo_green "Done..."
