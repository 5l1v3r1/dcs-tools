#!/bin/bash

# This script copies whole root directory of target to sync location
set -e

set_dir () { DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; }; set_dir
safe_source () { source $1; set_dir; }

if [[ $(id -u) > 0 ]]; then sudo $0 "$@"; exit; fi

safe_source $DIR/aktos-bash-lib/basic-functions.sh
safe_source $DIR/aktos-bash-lib/fs-functions.sh
safe_source $DIR/aktos-bash-lib/ssh-functions.sh

sync_dir=
source=
RSYNC="nice -n19 ionice -c3 rsync"
show_help () {
    cat <<HELP

    Usage:

        $(basename $0) ...options...

    Options:

    --sync-dir      : sync directory
    --source        : source address: "ssh://user@host:[port]/folder/to/sync"

HELP
}

die () {
    errcho "ERROR: "
    errcho "ERROR: $@"
    errcho "ERROR: "
    show_help
    exit 255
}

while :; do
    case $1 in
        -h|-\?|--help)
            show_help    # Display a usage synopsis.
            exit
            ;;
        --sync-dir)       # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                sync_dir=$(realpath $2)
                shift
            else
                die '"--sync-dir" requires a non-empty option argument.'
            fi
            ;;
        --source)       # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                source=$2
                shift
            else
                die '"--source" requires a non-empty option argument.'
            fi
            ;;
        -?*)
            printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
            ;;
        *)               # Default case: No more options, so break out of the loop.
            break
    esac

    shift
done

if [ ! $source ]; then
    die "SSH address is required."
else
    SSH_PORT=$(parse_url port $source)
    SSH_HOST=$(parse_url host $source)
    SSH_USER=$(parse_url user $source)
    SSH_PATH=$(parse_url path $source)

    # defaults
    [ $SSH_PORT ] || SSH_PORT="22"

    SSH_KEY_FILE="/home/$SUDO_USER/.ssh/id_rsa"
    echo_yellow $SSH_KEY_FILE
    echo_green "Using source: $source, port: $SSH_PORT addr: $SSH_HOST, user: $SSH_USER, path: $SSH_PATH"
fi

if [[ ! -d $sync_dir ]]; then
    die "sync directory must exist: $sync_dir"
else
    echo_green "Using sync directory: $sync_dir"
fi

if prompt_yes_no "Should we really continue?"; then
    echo_yellow "syncs will go to: $sync_dir"
else
    echo_info "Interrupted by user."
    exit 0
fi

start_timer

$RSYNC -aHAXvPh --delete --delete-excluded --exclude-from "$DIR/exclude-list.txt" \
	--rsh="ssh -p $SSH_PORT -i $SSH_KEY_FILE" --rsync-path="sudo rsync" $SSH_USER@$SSH_HOST:$SSH_PATH $sync_dir

show_timer "sync completed in:"
